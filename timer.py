# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'timer.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math

import matplotlib
import numpy
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QInputDialog, QMainWindow, QMessageBox
from datetime import datetime
from datetime import timedelta
from plyer.utils import platform
from plyer import notification
import matplotlib.pyplot as plt
from matplotlib import style

from win10toast import ToastNotifier

from firebase import Firebase


class Ui_TrackTime(QMainWindow):

    def __init__(self):
        super(Ui_TrackTime, self).__init__()
        self.start_count = 0

    def setupUi(self, TrackTime):

        self.count = 0
        self.begin_count = 0
        self.end_count = 0
        self.start = False
        self.count_up = 0

        TrackTime.setObjectName("TrackTime")
        TrackTime.resize(905, 569)
        TrackTime.setAutoFillBackground(False)
        TrackTime.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(TrackTime)
        self.centralwidget.setStyleSheet("QPushButton{\n"
                                         "background-color: rgb(42,42,42);\n"
                                         "    color: rgb(255, 255, 255);\n"
                                         "border-width:2px;\n"
                                         "border-style:solid;\n"
                                         "border-color: rgb(255, 255, 255);\n"
                                         "border-radius: 10px;\n"
                                         "}\n"
                                         "\n"
                                         "QPushButton::hover\n"
                                         "{\n"
                                         "   \n"
                                         "    color: rgb(30, 30, 30);\n"
                                         "    background-color: rgba(92,201,107,255);\n"
                                         "}\n"
                                         "\n"
                                         "")
        self.centralwidget.setObjectName("centralwidget")
        self.logo = QtWidgets.QLabel(self.centralwidget)
        self.logo.setGeometry(QtCore.QRect(20, 10, 411, 131))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap("images/header.png"))
        self.logo.setScaledContents(True)
        self.logo.setObjectName("logo")
        self.btn_stop = QtWidgets.QPushButton(self.centralwidget)
        self.btn_stop.setGeometry(QtCore.QRect(360, 450, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(12)
        self.btn_stop.setFont(font)
        self.btn_stop.setStyleSheet("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/bookmark.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_stop.setIcon(icon)
        self.btn_stop.setObjectName("btn_stop")
        self.btn_pause = QtWidgets.QPushButton(self.centralwidget)
        self.btn_pause.setGeometry(QtCore.QRect(240, 450, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(12)
        self.btn_pause.setFont(font)
        self.btn_pause.setStyleSheet("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/pause-button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_pause.setIcon(icon1)
        self.btn_pause.setObjectName("btn_pause")
        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setGeometry(QtCore.QRect(120, 450, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(12)
        self.btn_start.setFont(font)
        self.btn_start.setStyleSheet("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/play-button.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_start.setIcon(icon2)
        self.btn_start.setObjectName("btn_start")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(30, 150, 851, 16))
        self.line.setStyleSheet("color:rgba(92,201,107,255);\n"
                                "border-color: rgba(92,201,107,255);")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.logo_3 = QtWidgets.QLabel(self.centralwidget)
        self.logo_3.setGeometry(QtCore.QRect(40, 140, 821, 331))
        self.logo_3.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.logo_3.setText("")
        self.logo_3.setPixmap(QtGui.QPixmap("images/timer.png"))
        self.logo_3.setScaledContents(True)
        self.logo_3.setObjectName("logo_3")
        self.lbl_greeting_3 = QtWidgets.QLabel(self.centralwidget)
        self.lbl_greeting_3.setGeometry(QtCore.QRect(120, 240, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(10)
        self.lbl_greeting_3.setFont(font)
        self.lbl_greeting_3.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.lbl_greeting_3.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.lbl_greeting_3.setObjectName("lbl_greeting_3")
        self.lbl_greeting_5 = QtWidgets.QLabel(self.centralwidget)
        self.lbl_greeting_5.setGeometry(QtCore.QRect(520, 260, 301, 71))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(14)
        self.lbl_greeting_5.setFont(font)
        self.lbl_greeting_5.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
                                          "color: rgb(255, 255, 255);")
        self.lbl_greeting_5.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_greeting_5.setObjectName("lbl_greeting_5")
        self.lbl_time = QtWidgets.QLabel(self.centralwidget)
        self.lbl_time.setGeometry(QtCore.QRect(540, 300, 261, 71))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(28)
        self.lbl_time.setFont(font)
        self.lbl_time.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
                                    "color: rgb(255, 255, 255);")
        self.lbl_time.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_time.setObjectName("lbl_time")
        self.btn_home = QtWidgets.QPushButton(self.centralwidget)
        self.btn_home.setGeometry(QtCore.QRect(750, 50, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(12)
        self.btn_home.setFont(font)
        self.btn_home.setStyleSheet("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/home.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_home.setIcon(icon3)
        self.btn_home.setObjectName("btn_home")
        self.btn_set_time = QtWidgets.QPushButton(self.centralwidget)
        self.btn_set_time.setGeometry(QtCore.QRect(150, 340, 111, 41))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(12)
        self.btn_set_time.setFont(font)
        self.btn_set_time.setStyleSheet("")
        self.btn_set_time.setObjectName("btn_set_time")
        self.txt_time = QtWidgets.QLineEdit(self.centralwidget)
        self.txt_time.setGeometry(QtCore.QRect(110, 280, 161, 51))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(16)
        self.txt_time.setFont(font)
        self.txt_time.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
                                    "color: rgb(255, 255, 255);")
        self.txt_time.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.txt_time.setObjectName("txt_time")
        self.btn_progress = QtWidgets.QPushButton(self.centralwidget)
        self.btn_progress.setGeometry(QtCore.QRect(560, 450, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Poppins Medium")
        font.setPointSize(12)
        self.btn_progress.setFont(font)
        self.btn_progress.setStyleSheet("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/growth.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_progress.setIcon(icon4)
        self.btn_progress.setObjectName("btn_progress")
        self.logo.raise_()
        self.btn_stop.raise_()
        self.btn_pause.raise_()
        self.line.raise_()
        self.logo_3.raise_()
        self.lbl_greeting_3.raise_()
        self.lbl_greeting_5.raise_()
        self.lbl_time.raise_()
        self.btn_home.raise_()
        self.btn_start.raise_()
        self.btn_set_time.raise_()
        self.txt_time.raise_()
        self.btn_progress.raise_()
        TrackTime.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(TrackTime)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 905, 26))
        self.menubar.setObjectName("menubar")
        TrackTime.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(TrackTime)
        self.statusbar.setObjectName("statusbar")
        TrackTime.setStatusBar(self.statusbar)

        QtCore.QMetaObject.connectSlotsByName(TrackTime)

        self.btn_start.clicked.connect(self.start_action)
        self.btn_pause.clicked.connect(self.pause_action)
        self.btn_stop.clicked.connect(self.reset_action)
        self.btn_set_time.clicked.connect(self.get_seconds)
        self.btn_progress.clicked.connect(self.progress)

        timer = QTimer(self)
        timer.timeout.connect(self.showTime)
        timer.start(100)

        self.retranslateUi(TrackTime)

    def progress(self):
        matplotlib.rcParams['toolbar'] = 'None'
        firebase = Firebase()
        try:
            values = firebase.get_progress()
            plt.style.use('dark_background')
            values_1 = numpy.array(values[1])
            new_array = values_1 / 3600
            plt.plot(values[0], new_array)
            plt.xlabel('DATE')
            plt.ylabel('TIME (HOURS)')
            plt.title('WORK PROGRESS')

            print(plt.style.available)
            plt.show()
        except:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setText("No records found")
            msgBox.setWindowTitle("Error")
            msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            returnValue = msgBox.exec()


    # method called by timer
    def showTime(self):

        # checking if flag is true
        if self.start:
            # incrementing the counter
            self.count -= 1

            # timer is completed
            if self.count == 0:
                # making flag false
                self.start = False

                # setting text to the label
                self.lbl_time.setText("FINISHED")
                worked_time = math.floor(float(self.txt_time.text()) * 60)
                firebase = Firebase()
                firebase.firebase_update_time(worked_time, datetime.today().strftime('%Y-%m-%d'))
                print('THIS IS AUTO COMPLETE')
                notification.notify(
                    title='Desk Meter | Time Tracker',
                    message='Time for a Break',
                    app_name='Desk Meter',
                    app_icon='images/logoicon.ico'
                )

        if self.start:
            # getting text from count
            text = str(self.count / 10) + " s"
            print(text)

            print(self.count)
            # for health reminders
            if (self.begin_count - self.count / 10) % (20 * 60) == 0:
                notification.notify(
                    title='Desk Meter | Health Meter',
                    message='Look away for 20 seconds',
                    app_name='Desk Meter',
                    app_icon='images/logoicon.ico'
                )
            if (self.begin_count - self.count / 10) % (30 * 60) == 0:
                notification.notify(
                    title='Desk Meter | Health Meter',
                    message='Drink a cup of water',
                    app_name='Desk Meter',
                    app_icon='images/logoicon.ico'
                )
            time = self.count / 10
            h = time // 3600
            m = time % 3600 // 60
            s = time % 3600 % 60
            # text = '{:02d}:{:02d}:{:02d}'.format(h, m, s)
            text = str(timedelta(seconds=self.count / 10)).split(".")[0]
            # text = f'{h},{m},{s}'
            self.lbl_time.setText(text)
        # secs = self.sec_to_hours(5000)
        # print(secs)

    # method called by the push button
    def get_seconds(self):

        # making flag false
        self.start = False

        # getting seconds and flag
        # second, done = QInputDialog.getInt(self, 'Seconds', 'Enter Seconds:')
        minute = float(self.txt_time.text())
        second = math.ceil(minute * 60)
        done = True
        # if flag is true
        if done:
            # changing the value of count
            self.count = second * 10
            self.begin_count = second
            print(self.begin_count)
            # setting text to the label
            h = second // 3600
            m = second % 3600 // 60
            s = second % 3600 % 60

            text = '{:02d}:{:02d}:{:02d}'.format(h, m, s)
            self.lbl_time.setText(text)

    def start_action(self):
        print("started")
        self.start_count = self.count
        # self.lbl_time.setText("Ado")
        # making flag true
        self.start = True

        # count = 0
        if self.count == 0:
            print("Finished")
            self.start = False

    def pause_action(self):

        # making flag false
        self.start = False

    def reset_action(self):

        # making flag false
        self.start = False
        self.end_count = self.count
        print(f'SECONDS : {int(self.txt_time.text()) * 60 - self.end_count / 10.0}')
        worked_time = math.floor(float(self.txt_time.text()) * 60 - self.end_count / 10.0)

        # setting count value to 0
        self.count = 0

        # setting label text
        self.lbl_time.setText("FINISHED")
        firebase = Firebase()
        firebase.firebase_update_time(worked_time, datetime.today().strftime('%Y-%m-%d'))
        notification.notify(
            title='Desk Meter | Time Tracker',
            message='Time for a Break',
            app_name='Desk Meter',
            app_icon='images/logoicon.ico'
        )

        # firebase = Firebase()
        # firebase.firebase_update_time(worked_time,'12')

    def retranslateUi(self, TrackTime):
        _translate = QtCore.QCoreApplication.translate
        TrackTime.setWindowTitle(_translate("TrackTime", "Main Menu"))
        self.btn_stop.setText(_translate("TrackTime", "Stop and Save"))
        self.btn_pause.setText(_translate("TrackTime", "Pause"))
        self.btn_start.setText(_translate("TrackTime", "Start"))
        self.lbl_greeting_3.setText(_translate("TrackTime", "Work time (mins)"))
        self.lbl_greeting_5.setText(_translate("TrackTime", "Remaining Time"))
        self.lbl_time.setText(_translate("TrackTime", "SET TIME"))
        self.btn_home.setText(_translate("TrackTime", "Home"))
        self.btn_set_time.setText(_translate("TrackTime", "Set Time"))
        self.txt_time.setText(_translate("TrackTime", "25"))
        self.btn_progress.setText(_translate("TrackTime", "View My Progress"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    TrackTime = QtWidgets.QMainWindow()
    ui = Ui_TrackTime()
    ui.setupUi(TrackTime)
    TrackTime.show()
    sys.exit(app.exec_())
